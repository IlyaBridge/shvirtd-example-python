version: '3.8'

include:
  - proxy.yaml  # Подключаем существующую конфигурацию прокси

services:
  web:
    build:
      context: .  # Собираем из Dockerfile.python
      dockerfile: Dockerfile.python
    networks:
      backend:
        ipv4_address: 172.20.0.5  # Фиксированный IP
    environment:
      DB_HOST: db  # Используем имя сервиса для подключения
      DB_USER: ${MYSQL_USER}  # Из .env
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_NAME: ${MYSQL_DATABASE}
    restart: always  # Автоперезапуск
    depends_on:
      db:
        condition: service_healthy

  db:
    image: mysql:8
    networks:
      backend:
        ipv4_address: 172.20.0.10  # Фиксированный IP
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:  # Для корректного depends_on
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  backend:  # Сеть из proxy.yaml
    external: true

volumes:
  mysql_data:


# version: '3.8'

# services:
#   web:
#     build:
#       context: .
#       dockerfile: Dockerfile.python
#     networks:
#       backend:
#         ipv4_address: 172.20.0.5  # Фиксированный IP для web-сервиса
#     environment:
#       DB_HOST: db
#       DB_USER: ${MYSQL_USER}
#       DB_PASSWORD: ${MYSQL_PASSWORD}
#       DB_NAME: ${MYSQL_DATABASE}
#     restart: always

#   db:
#     image: mysql:8
#     networks:
#       backend:
#         ipv4_address: 172.20.0.10  # Фиксированный IP для MySQL
#     environment:
#       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#       MYSQL_DATABASE: ${MYSQL_DATABASE}
#       MYSQL_USER: ${MYSQL_USER}
#       MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#     restart: always
#     volumes:
#       - mysql_data:/var/lib/mysql

#   reverse-proxy:
#     image: haproxy:2.4
#     restart: always
#     networks:
#       backend: {}
#     ports:
#       - "127.0.0.1:8080:8080"
#     volumes:
#       - ./haproxy/reverse/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:rw

#   ingress-proxy:
#     image: nginx:1.21.1
#     restart: always
#     network_mode: host
#     volumes:
#       - ./nginx/ingress/default.conf:/etc/nginx/conf.d/default.conf:rw
#       - ./nginx/ingress/nginx.conf:/etc/nginx/nginx.conf:rw

# networks:
#   backend:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 172.20.0.0/24  # Подсеть должна соответствовать схеме

# volumes:
#   mysql_data: